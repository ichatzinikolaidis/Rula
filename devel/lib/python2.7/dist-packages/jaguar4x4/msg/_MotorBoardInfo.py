# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jaguar4x4/MotorBoardInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MotorBoardInfo(genpy.Message):
  _md5sum = "36cf7e6578c8ea959b3e6f20802b9a94"
  _type = "jaguar4x4/MotorBoardInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#this is used for Motor Driver board info
Header header 	  #std_msg header
uint32 status	  # as described in motor driver board manual
float32 temp1	  # temperature 1, internal chip temperature
float32 temp2	  # driver channel 1 temperature
float32 temp3	  # driver channel 2 temperature
float32 volMain  # main power voltage, default is battery voltage
float32 vol12V	  # 12V power 
float32 vol5V	  # 5V power
uint32 dinput	  # digital input, not used now
uint32 doutput	  # digital output, not used now
int32 ack	  # 0- right command received(receive "+") -1 wrong("-")

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','status','temp1','temp2','temp3','volMain','vol12V','vol5V','dinput','doutput','ack']
  _slot_types = ['std_msgs/Header','uint32','float32','float32','float32','float32','float32','float32','uint32','uint32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,temp1,temp2,temp3,volMain,vol12V,vol5V,dinput,doutput,ack

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorBoardInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = 0
      if self.temp1 is None:
        self.temp1 = 0.
      if self.temp2 is None:
        self.temp2 = 0.
      if self.temp3 is None:
        self.temp3 = 0.
      if self.volMain is None:
        self.volMain = 0.
      if self.vol12V is None:
        self.vol12V = 0.
      if self.vol5V is None:
        self.vol5V = 0.
      if self.dinput is None:
        self.dinput = 0
      if self.doutput is None:
        self.doutput = 0
      if self.ack is None:
        self.ack = 0
    else:
      self.header = std_msgs.msg.Header()
      self.status = 0
      self.temp1 = 0.
      self.temp2 = 0.
      self.temp3 = 0.
      self.volMain = 0.
      self.vol12V = 0.
      self.vol5V = 0.
      self.dinput = 0
      self.doutput = 0
      self.ack = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I6f2Ii.pack(_x.status, _x.temp1, _x.temp2, _x.temp3, _x.volMain, _x.vol12V, _x.vol5V, _x.dinput, _x.doutput, _x.ack))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.status, _x.temp1, _x.temp2, _x.temp3, _x.volMain, _x.vol12V, _x.vol5V, _x.dinput, _x.doutput, _x.ack,) = _struct_I6f2Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I6f2Ii.pack(_x.status, _x.temp1, _x.temp2, _x.temp3, _x.volMain, _x.vol12V, _x.vol5V, _x.dinput, _x.doutput, _x.ack))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.status, _x.temp1, _x.temp2, _x.temp3, _x.volMain, _x.vol12V, _x.vol5V, _x.dinput, _x.doutput, _x.ack,) = _struct_I6f2Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I6f2Ii = struct.Struct("<I6f2Ii")
_struct_3I = struct.Struct("<3I")
