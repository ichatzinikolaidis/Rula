// Generated by gencpp from file jaguar4x4/IMUData.msg
// DO NOT EDIT!


#ifndef JAGUAR4X4_MESSAGE_IMUDATA_H
#define JAGUAR4X4_MESSAGE_IMUDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace jaguar4x4
{
template <class ContainerAllocator>
struct IMUData_
{
  typedef IMUData_<ContainerAllocator> Type;

  IMUData_()
    : header()
    , seq(0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)
    , accel_x(0)
    , accel_y(0)
    , accel_z(0)
    , comp_x(0)
    , comp_y(0)
    , comp_z(0)  {
    }
  IMUData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , gyro_x(0)
    , gyro_y(0)
    , gyro_z(0)
    , accel_x(0)
    , accel_y(0)
    , accel_z(0)
    , comp_x(0)
    , comp_y(0)
    , comp_z(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef int32_t _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef int32_t _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef int32_t _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef int32_t _accel_x_type;
  _accel_x_type accel_x;

   typedef int32_t _accel_y_type;
  _accel_y_type accel_y;

   typedef int32_t _accel_z_type;
  _accel_z_type accel_z;

   typedef int32_t _comp_x_type;
  _comp_x_type comp_x;

   typedef int32_t _comp_y_type;
  _comp_y_type comp_y;

   typedef int32_t _comp_z_type;
  _comp_z_type comp_z;




  typedef boost::shared_ptr< ::jaguar4x4::IMUData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaguar4x4::IMUData_<ContainerAllocator> const> ConstPtr;

}; // struct IMUData_

typedef ::jaguar4x4::IMUData_<std::allocator<void> > IMUData;

typedef boost::shared_ptr< ::jaguar4x4::IMUData > IMUDataPtr;
typedef boost::shared_ptr< ::jaguar4x4::IMUData const> IMUDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaguar4x4::IMUData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaguar4x4::IMUData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jaguar4x4

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'jaguar4x4': ['/home/iordanis/Roula/src/motor_and_sensor_controllers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jaguar4x4::IMUData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaguar4x4::IMUData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaguar4x4::IMUData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaguar4x4::IMUData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaguar4x4::IMUData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaguar4x4::IMUData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaguar4x4::IMUData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7938ee7db79ec144585dcc476525d246";
  }

  static const char* value(const ::jaguar4x4::IMUData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7938ee7db79ec144ULL;
  static const uint64_t static_value2 = 0x585dcc476525d246ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaguar4x4::IMUData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaguar4x4/IMUData";
  }

  static const char* value(const ::jaguar4x4::IMUData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaguar4x4::IMUData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#IMU sensor data\n\
Header header		# std_msg header\n\
uint32 seq		# package sequency number, 0 ~ 255\n\
float32 yaw		# yaw estimate, radian\n\
float32 pitch		# pitch estimate, radian\n\
float32 roll		# roll estiamte, radian\n\
int32 gyro_x		# raw gyro x axis data\n\
int32 gyro_y		# raw gyro y axis data\n\
int32 gyro_z		# raw gyro z axis data\n\
int32 accel_x		# raw accel x axis data\n\
int32 accel_y		# raw accel y axis data\n\
int32 accel_z		# raw accel z axis data\n\
int32 comp_x		# raw magnetic x axis data\n\
int32 comp_y		# raw magnetic y axis data\n\
int32 comp_z		# raw magnetic z axis data \n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::jaguar4x4::IMUData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaguar4x4::IMUData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.comp_x);
      stream.next(m.comp_y);
      stream.next(m.comp_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct IMUData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaguar4x4::IMUData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaguar4x4::IMUData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "gyro_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "accel_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accel_z);
    s << indent << "comp_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.comp_x);
    s << indent << "comp_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.comp_y);
    s << indent << "comp_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.comp_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAGUAR4X4_MESSAGE_IMUDATA_H
